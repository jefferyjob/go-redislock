// Code generated by MockGen. DO NOT EDIT.
// Source: lock.go
//
// Generated by this command:
//
//	mockgen -source=lock.go -destination=mocks/lock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisLockInter is a mock of RedisLockInter interface.
type MockRedisLockInter struct {
	ctrl     *gomock.Controller
	recorder *MockRedisLockInterMockRecorder
}

// MockRedisLockInterMockRecorder is the mock recorder for MockRedisLockInter.
type MockRedisLockInterMockRecorder struct {
	mock *MockRedisLockInter
}

// NewMockRedisLockInter creates a new mock instance.
func NewMockRedisLockInter(ctrl *gomock.Controller) *MockRedisLockInter {
	mock := &MockRedisLockInter{ctrl: ctrl}
	mock.recorder = &MockRedisLockInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisLockInter) EXPECT() *MockRedisLockInterMockRecorder {
	return m.recorder
}

// FairLock mocks base method.
func (m *MockRedisLockInter) FairLock(ctx context.Context, requestId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FairLock", ctx, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FairLock indicates an expected call of FairLock.
func (mr *MockRedisLockInterMockRecorder) FairLock(ctx, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FairLock", reflect.TypeOf((*MockRedisLockInter)(nil).FairLock), ctx, requestId)
}

// FairRenew mocks base method.
func (m *MockRedisLockInter) FairRenew(ctx context.Context, requestId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FairRenew", ctx, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FairRenew indicates an expected call of FairRenew.
func (mr *MockRedisLockInterMockRecorder) FairRenew(ctx, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FairRenew", reflect.TypeOf((*MockRedisLockInter)(nil).FairRenew), ctx, requestId)
}

// FairUnLock mocks base method.
func (m *MockRedisLockInter) FairUnLock(ctx context.Context, requestId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FairUnLock", ctx, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FairUnLock indicates an expected call of FairUnLock.
func (mr *MockRedisLockInterMockRecorder) FairUnLock(ctx, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FairUnLock", reflect.TypeOf((*MockRedisLockInter)(nil).FairUnLock), ctx, requestId)
}

// Lock mocks base method.
func (m *MockRedisLockInter) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockRedisLockInterMockRecorder) Lock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockRedisLockInter)(nil).Lock), ctx)
}

// Renew mocks base method.
func (m *MockRedisLockInter) Renew(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Renew", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Renew indicates an expected call of Renew.
func (mr *MockRedisLockInterMockRecorder) Renew(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renew", reflect.TypeOf((*MockRedisLockInter)(nil).Renew), ctx)
}

// SpinFairLock mocks base method.
func (m *MockRedisLockInter) SpinFairLock(ctx context.Context, requestId string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpinFairLock", ctx, requestId, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpinFairLock indicates an expected call of SpinFairLock.
func (mr *MockRedisLockInterMockRecorder) SpinFairLock(ctx, requestId, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpinFairLock", reflect.TypeOf((*MockRedisLockInter)(nil).SpinFairLock), ctx, requestId, timeout)
}

// SpinLock mocks base method.
func (m *MockRedisLockInter) SpinLock(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpinLock", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpinLock indicates an expected call of SpinLock.
func (mr *MockRedisLockInterMockRecorder) SpinLock(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpinLock", reflect.TypeOf((*MockRedisLockInter)(nil).SpinLock), ctx, timeout)
}

// UnLock mocks base method.
func (m *MockRedisLockInter) UnLock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnLock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnLock indicates an expected call of UnLock.
func (mr *MockRedisLockInterMockRecorder) UnLock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnLock", reflect.TypeOf((*MockRedisLockInter)(nil).UnLock), ctx)
}
