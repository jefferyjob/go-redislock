// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source=adapter.go -destination=mock/adapter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	go_redislock "github.com/jefferyjob/go-redislock"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisInter is a mock of RedisInter interface.
type MockRedisInter struct {
	ctrl     *gomock.Controller
	recorder *MockRedisInterMockRecorder
}

// MockRedisInterMockRecorder is the mock recorder for MockRedisInter.
type MockRedisInterMockRecorder struct {
	mock *MockRedisInter
}

// NewMockRedisInter creates a new mock instance.
func NewMockRedisInter(ctrl *gomock.Controller) *MockRedisInter {
	mock := &MockRedisInter{ctrl: ctrl}
	mock.recorder = &MockRedisInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisInter) EXPECT() *MockRedisInterMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockRedisInter) Eval(ctx context.Context, script string, keys []string, args ...any) go_redislock.RedisCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Eval", varargs...)
	ret0, _ := ret[0].(go_redislock.RedisCmd)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockRedisInterMockRecorder) Eval(ctx, script, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockRedisInter)(nil).Eval), varargs...)
}

// MockRedisCmd is a mock of RedisCmd interface.
type MockRedisCmd struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCmdMockRecorder
}

// MockRedisCmdMockRecorder is the mock recorder for MockRedisCmd.
type MockRedisCmdMockRecorder struct {
	mock *MockRedisCmd
}

// NewMockRedisCmd creates a new mock instance.
func NewMockRedisCmd(ctrl *gomock.Controller) *MockRedisCmd {
	mock := &MockRedisCmd{ctrl: ctrl}
	mock.recorder = &MockRedisCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCmd) EXPECT() *MockRedisCmdMockRecorder {
	return m.recorder
}

// Int64 mocks base method.
func (m *MockRedisCmd) Int64() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int64 indicates an expected call of Int64.
func (mr *MockRedisCmdMockRecorder) Int64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockRedisCmd)(nil).Int64))
}

// Result mocks base method.
func (m *MockRedisCmd) Result() (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockRedisCmdMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockRedisCmd)(nil).Result))
}
